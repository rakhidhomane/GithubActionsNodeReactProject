name: SonarCloud Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarcloud:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (for dependencies and tests)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18  # Adjust to your project Node.js version

      # Step 3: Install Frontend Dependencies
      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      # Step 4: Run tests and generate coverage for frontend
      - name: Run Frontend Tests
        working-directory: frontend
        run: npm test -- --coverage

      # Step 5: Install Backend Dependencies
      - name: Install Backend Dependencies
        working-directory: backend
        run: npm install

      # Step 6: Grant Permissions to Jest
      - name: Set Jest Execution Permissions
        run: chmod +x ./backend/node_modules/.bin/jest

      # Step 7: Run tests and generate coverage for backend
      - name: Run Backend Tests
        working-directory: backend
        run: npm test -- --coverage
        env:
          CI: true

      # Step 8: Run SonarCloud Analysis
      - name: SonarCloud Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npm install -g sonarqube-scanner
          sonar-scanner \
             -D"sonar.organization=rakhidhomane" \
             -D"sonar.projectKey=rakhidhomane_GithubActionsNodeReactProject" \
             -D"sonar.sources=." \
             -D"sonar.host.url=https://sonarcloud.io" \
             -D"sonar.javascript.lcov.reportPaths=coverage/lcov.info"

     # Step 6: Check SonarCloud Quality Gate
      - name: Check SonarCloud Quality Gate
        run: |
          echo "Checking SonarCloud Quality Gate status..."
          sleep 30 # Wait for the analysis to complete
          response=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=rakhidhomane_GithubActionsNodeReactProject")
          status=$(echo $response | jq -r '.projectStatus.status')
          if [ "$status" != "OK" ]; then
            echo "Quality Gate failed: $status"
            exit 1
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 10: Send Slack Notification on Success
      - name: Slack Notification on Success
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {"text": "✅ *GitHub Actions Workflow Successful*\nProject: *SonarCloud Analysis*\nStatus: *SUCCESS*\nBranch: ${{ github.ref }}\nTriggered by: ${{ github.actor }}"}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACKWEBHOOKURL }}

      # Step 11: Send Slack Notification on Failure
      - name: Slack Notification on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {"text": "❌ *GitHub Actions Workflow Failed*\nProject: *SonarCloud Analysis*\nStatus: *FAILED*\nBranch: ${{ github.ref }}\nTriggered by: ${{ github.actor }}"}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACKWEBHOOKURL }}

      # Step 12: Send Slack Notification for Quality Gate Failure
      - name: Slack Notification for Quality Gate Failure
        if: failure() && steps.quality-gate.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {"text": "❌ *Quality Gate Failed*\nProject: *SonarCloud Analysis*\nStatus: *FAILED*\nBranch: ${{ github.ref }}\nTriggered by: ${{ github.actor }}"}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACKWEBHOOKURL }}
